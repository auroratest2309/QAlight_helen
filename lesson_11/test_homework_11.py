
"""
–¢–µ—Å—Ç–∏ –¥–ª—è —Ñ–∞–π–ª—É tasks.py
–ó–∞–ø—É—Å–∫: pytest test_tasks.py
"""
import pytest
#import sys
import math
#from pathlib import Path

"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª 
–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç –Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—é add(a, b), —è–∫–∞ –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –¥–≤–æ—Ö —á–∏—Å–µ–ª. 
–°—Ç–≤–æ—Ä–∏ —Ç–µ—Å—Ç, —è–∫–∏–π –ø–µ—Ä–µ–≤—ñ—Ä—è—î –∫—ñ–ª—å–∫–∞ –≤–∏–ø–∞–¥–∫—ñ–≤: –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ–¥–∞—Ç–Ω–∏—Ö, –≤—ñ–¥‚Äô—î–º–Ω–∏—Ö —ñ –Ω—É–ª—è.
"""
def add(a,b):
    return a + b

def test_add():
    assert add(2, 3) == 5
    assert add(-2, -3) == -5
    assert add(0, 3) == 3
    assert add(-5,0) == -5


"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞—Ä–Ω–æ—Å—Ç—ñ 
–§—É–Ω–∫—Ü—ñ—è is_even(n) –ø–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ —á–∏—Å–ª–æ –ø–∞—Ä–Ω–µ, —ñ–Ω–∞–∫—à–µ False. 
–ù–∞–ø–∏—à–∏ —Ç–µ—Å—Ç–∏ –¥–ª—è –∫—ñ–ª—å–∫–æ—Ö —á–∏—Å–µ–ª: –ø–∞—Ä–Ω–∏—Ö, –Ω–µ–ø–∞—Ä–Ω–∏—Ö, –≤—ñ–¥‚Äô—î–º–Ω–∏—Ö.
"""
def is_even (n):
    return n % 2 == 0

def test_is_even():
    assert is_even (2) is True
    assert is_even (0) is True
    assert is_even (-4) is True
    assert is_even (3) is False
    assert is_even (-7) is False
   

    # TODO: –¥–æ–¥–∞–π —Ç–µ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó is_even
   


"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 3. –†–æ–∑–≤–æ—Ä–æ—Ç —Ä—è–¥–∫–∞ 
–§—É–Ω–∫—Ü—ñ—è reverse_string(s) –ø–æ–≤–∏–Ω–Ω–∞ –ø–æ–≤–µ—Ä—Ç–∞—Ç–∏ —Ä—è–¥–æ–∫ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É. 
–ü–µ—Ä–µ–≤—ñ—Ä: –∑–≤–∏—á–∞–π–Ω–∏–π —Ä—è–¥–æ–∫, –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫, —Ä—è–¥–æ–∫ –∑ –æ–¥–Ω–∏–º —Å–∏–º–≤–æ–ª–æ–º.
"""
def reverse_string(s):
    return s[::-1]

def test_reverse_string():
    assert reverse_string ("Hello") == "olleH"
    assert reverse_string ("A") == "A"
    assert reverse_string ("") == ""


    # TODO: –¥–æ–¥–∞–π —Ç–µ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó reverse_string



"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 4. –ú—ñ–Ω—ñ–º—É–º —É —Å–ø–∏—Å–∫—É 
–§—É–Ω–∫—Ü—ñ—è find_min(nums) –ø–æ–≤–µ—Ä—Ç–∞—î –Ω–∞–π–º–µ–Ω—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫—É. 
–ü—Ä–æ—Ç–µ—Å—Ç—É–π –¥–ª—è: –∑–≤–∏—á–∞–π–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É, —Å–ø–∏—Å–∫—É –∑ –æ–¥–Ω–∏–º –µ–ª–µ–º–µ–Ω—Ç–æ–º, —Å–ø–∏—Å–∫—É –∑ –≤—ñ–¥‚Äô—î–º–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏.
"""
def find_min(nums):
    return min(nums)
   

def test_find_min():
    assert find_min([1, 2, 8, 99, 1001]) == 1
    assert find_min([8]) == 8
    assert find_min([-1, -2, -8, -99, -1001]) == -1001

    # TODO: –¥–æ–¥–∞–π —Ç–µ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó find_min


"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥—Ä—è–¥–∫–∞ 
–§—É–Ω–∫—Ü—ñ—è contains_substring(s, sub) –ø–æ–≤–µ—Ä—Ç–∞—î True, —è–∫—â–æ sub —î –≤ s. 
–ü—Ä–æ—Ç–µ—Å—Ç—É–π –≤–∏–ø–∞–¥–∫–∏: –ø—ñ–¥—Ä—è–¥–æ–∫ —î, –ø—ñ–¥—Ä—è–¥–∫–∞ –Ω–µ–º–∞, –ø–æ—Ä–æ–∂–Ω—ñ–π –ø—ñ–¥—Ä—è–¥–æ–∫.
"""
def contains_substring(s, sub):
    return sub in s

def test_contains_substring():
    assert contains_substring ("Hello word", "word") is True
    assert contains_substring ("Hello word", "python") is False
    assert contains_substring ("Hello word", "") is True
    assert contains_substring ("", "word") is False

    # TODO: –¥–æ–¥–∞–π —Ç–µ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó contains_substring



"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 6. –§–∞–∫—Ç–æ—Ä—ñ–∞–ª 
–§—É–Ω–∫—Ü—ñ—è factorial(n) –æ–±—á–∏—Å–ª—é—î —Ñ–∞–∫—Ç–æ—Ä—ñ–∞–ª —á–∏—Å–ª–∞ n. 
–ü—Ä–æ—Ç–µ—Å—Ç—É–π: factorial(0), factorial(1), factorial(5).
"""
def test_factorial():
    assert math.factorial(0) == 1
    assert math.factorial(1) == 1
    assert math.factorial(5) ==120

    # TODO: –¥–æ–¥–∞–π —Ç–µ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó factorial
  


"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 7. –î—ñ–ª–µ–Ω–Ω—è –∑ –≤–∏–Ω—è—Ç–∫–æ–º 
–§—É–Ω–∫—Ü—ñ—è divide(a, b) –¥—ñ–ª–∏—Ç—å a –Ω–∞ b. 
–ü–µ—Ä–µ–≤—ñ—Ä: –∑–≤–∏—á–∞–π–Ω–µ –¥—ñ–ª–µ–Ω–Ω—è, –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –≤—ñ–¥‚Äô—î–º–Ω–µ —á–∏—Å–ª–æ, –¥—ñ–ª–µ–Ω–Ω—è –Ω–∞ –Ω—É–ª—å (–æ—á—ñ–∫—É–≤–∞–Ω–∏–π ZeroDivisionError).
"""
def div(a,b):
    return a / b
def test_divide():
    assert div(10, 2) == 5
    assert div(20, -5) == -4
    with pytest.raises(ZeroDivisionError):
        div(5, 0)
    # TODO: –¥–æ–¥–∞–π —Ç–µ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó divide



"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 8. –ü–∞–ª—ñ–Ω–¥—Ä–æ–º 
–§—É–Ω–∫—Ü—ñ—è is_palindrome(s) –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î —Ä—è–¥–æ–∫ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º. 
–ü—Ä–æ—Ç–µ—Å—Ç—É–π: –ø–∞–ª—ñ–Ω–¥—Ä–æ–º, –Ω–µ–ø–∞–ª—ñ–Ω–¥—Ä–æ–º, –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫.
"""
def is_palindrome(s):
    return s == s[::-1]
def test_is_palindrome():
    assert is_palindrome("level") is True
    assert is_palindrome("hello") is False
    assert is_palindrome("") is True
    # TODO: –¥–æ–¥–∞–π —Ç–µ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó is_palindrome



"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 9. –°—É–º–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å–ø–∏—Å–∫—É 
–§—É–Ω–∫—Ü—ñ—è sum_list(nums) –ø–æ–≤–µ—Ä—Ç–∞—î —Å—É–º—É –≤—Å—ñ—Ö —á–∏—Å–µ–ª —É —Å–ø–∏—Å–∫—É. 
–ü—Ä–æ—Ç–µ—Å—Ç—É–π: –∑–≤–∏—á–∞–π–Ω–∏–π —Å–ø–∏—Å–æ–∫, –ø–æ—Ä–æ–∂–Ω—ñ–π —Å–ø–∏—Å–æ–∫, —Å–ø–∏—Å–æ–∫ –∑ –≤—ñ–¥‚Äô—î–º–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏.
"""
def sum_list(nums):
    return sum(nums)

def test_sum_list():
    assert sum_list([1,2,3,4,5]) == 15
    assert sum_list([0,-1,-2,-5]) == -8
    assert sum_list([]) == 0
    # TODO: –¥–æ–¥–∞–π —Ç–µ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó sum_list



"""
üìù –ó–∞–≤–¥–∞–Ω–Ω—è 10. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è –≤ –≤–µ—Ä—Ö–Ω—ñ–π —Ä–µ–≥—ñ—Å—Ç—Ä 
–§—É–Ω–∫—Ü—ñ—è to_upper(s) –ø–æ–≤–µ—Ä—Ç–∞—î —Ä—è–¥–æ–∫ —É –≤–µ—Ä—Ö–Ω—å–æ–º—É —Ä–µ–≥—ñ—Å—Ç—Ä—ñ. 
–ü—Ä–æ—Ç–µ—Å—Ç—É–π: –∑–≤–∏—á–∞–π–Ω–∏–π —Ä—è–¥–æ–∫, –≤–∂–µ –≤–µ–ª–∏–∫–∏–º–∏ –ª—ñ—Ç–µ—Ä–∞–º–∏, –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫.
"""
def to_upper(s):
    return (s.upper())


def test_to_upper():
    assert to_upper("hello") == "HELLO"
    assert to_upper("PYTHON") == "PYTHON"
    assert to_upper("") == ""

    # TODO: –¥–æ–¥–∞–π —Ç–µ—Å—Ç–∏ –¥–ª—è —Ñ—É–Ω–∫—Ü—ñ—ó to_upper

